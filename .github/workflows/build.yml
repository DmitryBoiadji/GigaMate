name: Build and Release

on: push

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
#   workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: ['20.x']
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm install

    - name: Build Electron app
      run: npm run build

    - name: Package Electron app
      run: npm run dist -- --${{ matrix.os == 'windows-latest' && 'win' || matrix.os == 'macos-latest' && 'mac' || 'linux' }}

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: electron-app-${{ matrix.os }}
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20.x'

    - name: Install dependencies
      run: npm install

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Download artifact (Ubuntu)
      uses: actions/download-artifact@v2
      with:
        name: electron-app-ubuntu-latest
        path: ./dist-ubuntu

    - name: Download artifact (macOS)
      uses: actions/download-artifact@v2
      with:
        name: electron-app-macos-latest
        path: ./dist-macos

    - name: Download artifact (Windows)
      uses: actions/download-artifact@v2
      with:
        name: electron-app-windows-latest
        path: ./dist-windows

    - name: Upload Release Asset (Ubuntu)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist-ubuntu/
        asset_name: electron-app-ubuntu.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist-macos/
        asset_name: electron-app-macos.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist-windows/
        asset_name: electron-app-windows.zip
        asset_content_type: application/zip




